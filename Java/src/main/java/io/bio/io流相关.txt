节点流和处理流
    节点流可以从一个特定的数据读写数据，如FileReader、FileWriter、FileInputStream、FileOutputStream
    处理流是"连接"在已存在的流(节点流或处理流)之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter
        BufferedReader 类中，有属性Reader reader，即可以封装一个节点流，该节点流可以是任意的Reader的子类

    节点流和处理流(包装流)的区别和联系
        1、节点流是底层流，直接跟数据源相接。
        2、处理流包装节点流，既可以消除不同节点流之间的实现差异，也可以提供更方便的方法来完成输入输出
        3、处理流对节点流进行包装，使用了装饰器设计模式，不会直接与数据源相连

    处理流的功能主要体现在以下两个方面：
        1、性能的提高：主要以增加缓冲的方式来提高输入输出的效率
        2、操作的便捷：处理流提供了一系列编辑的方法来一次输入输出大批量的数据，使用更加方便灵活

对象流 ObjectInputStream ObjectOutputStream
    序列化和反序列化
        1、序列化就是在保存数据时，保存数据的值和数据类型
        2、反序列化就是在恢复数据时，恢复数据的值和数据类型
        3、需要让某个对象支持序列化机制，则必须让其类是可序列化的
            类必须实现如下两个接口
                Serializable // 这个是一个标记接口，没有任何的方法
                Externalizable // 有方法需要实现

    注意事项：
        1、读写顺序要一致
        2、要求实现序列化或反序列化对象，需要实现Serializable
        3、序列化的类中建议添加private static final serialVersionUID，为了提高版本的兼容性
            如果有了 serialVersionUID ，再在序列化后的Object中新增属性时，就不会认为是一个全新的类，而是认为是版本的修改
        4、序列化对象时，默认将里面所有的属性都进行序列化，但除了static或transient修饰的成员变量
        5、序列化对象时，要求里面属性的类型也需要实现序列化接口
        6、序列化具备科可继承性，也就是如果某类已经实现了序列化，则他的所有子类也已经默认实现了序列化


标准输入输出流
                            类型            默认设备
    System.in   标准输入    InputStream     键盘
    System.out  标准输出    PrintStream     显示器

        打印流 PrintStream(字节流) PrintWriter(字符流)
            打印流只有输出流，没有输入流

转换流 InputStreamReader、OutputStreamWriter
    1、InputStreamReader: Reader的子类，可以将InputStream(字节流)包装成Reader(字符流)
    2、OutputStreamWriter: Writer的子类，实现将OutputStream(字节流)包装成Writer(字符流)
    3、当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文乱码问题，所以建议将字节流转换成字符流
    4、可以在使用字节流时指定编码格式(比如：UTF-8, gbk等)


Properties类 java.util.Properties extends java.util.Hashtable<Object, Object>
    常见方法：
        list：将数据显示到指定设备/流对象
        getProperty(key)：根据键值对获取值
        setProperty(key, value)：设置键值对到Properties对象
        load：加载配置文件的键值对到Properties对象
        store：将Properties中的键值对存储到配置文件，在idea中保存信息到配置文件，如果含有中文，会存储为unicode码


