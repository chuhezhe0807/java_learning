对象头 mark word
    markWord        8字节 三类信息 （锁信息、hashcode、GC）
    classPointer    4字节
    instanceData    n字节
    padding         n字节


CMS采用 标记-清理 的算法，标记出垃圾对象，清除垃圾对象。算法是基于老年代执行的，因为新生代产生无法接受该算法产生的碎片垃圾。
CMS收集器(Concurrent Mark Sweep)
作用范围：
    老年代
垃圾回收过程：
    1、初始标记(STW)
    2、并发标记(三色标记算法)
    3、重新标记(STW)
    4、并发清除
优点：
    并发收集，低停顿
不足：
    无法处理浮动垃圾，并发收集会造成内存碎片过多
    由于并发标记和并发清理阶段都是并发执行，所以会额外消耗CPU资源

三色标记算法：
    重新标记的过程可以解决并发标记过程中的漏标问题，但是仍然有漏标的问题，CMS算法采用增量更新来解决这个问题（增量更新还是存在漏标问题）。
    三色：黑色、灰色和白色
    黑色：对象已经被垃圾收集器扫描过，并且这个对象的所有引用都已经扫描过了，所以它不可能指向白色对象；
    灰色：对象已经被垃圾收集器扫描过了，但是对象中还存在没有扫描的引用；
    白色：表示对象没有被垃圾收集器访问过，即表示不可达。

    增量更新指的是如果对象及对象的所有引用都已经被扫描过了并且又产生了新的引用那么这个对象将会由黑色变为灰色
    CMS的增量更新解决方案存在问题：
        m1（垃圾回收线程）正在标记A，已经标记玩属性1，正在标记属性2
            m2（业务逻辑线程）把属性1指向白色对象D
            m3（垃圾回收线程）把A标记为灰色
        m1（垃圾回收线程）认为所有属性标完，把A标记为黑色，结果D被漏标


对象的引用（强、软、弱、虚）
    强引用：普通引用，强引用指向的对象不会被回收
    软引用：仅有软引用指向的对象，只有发生gc且内存不足时，才会被回收
    弱引用：仅有弱引用指向的对象，只要发生gc就会被回收
    虚引用：虚引用并不会觉定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收，
        它不能单独使用也不能通过它访问对象，虚引用必须和引用队列（ReferenceQueue）联合使用。
        设置虚引用关联的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步处理。